type User {
    id: ID!
    username: String!
    name: String
    email: String
    role: Role
    phone: String
    active: Boolean
}

type UserPaginated{
    total: Int
    page: Int
    limit: Int
    items: [User]
}

type Query{
    me: User
    findUserByUsername(username: String!): User
    findUserById(id: ID!): User
    paginateUser(page: Int, limit: Int): UserPaginated
}

input UserInput{
    username: String!
    email: String!
    password: String!
    role: ID
    active: Boolean
    phone: String
}

type Auth{
    accessToken: String
}

input AuthInput{
    username: String!
    password: String!
}

type Mutation{
    auth(input: AuthInput): Auth
    createUser(input: UserInput): User
    updateUser(id: ID!, input: UserInput): User
    deleteUser(id: ID!): Boolean
}
